language: cpp
dist: trusty
sudo: required
os: linux

compiler:
  - gcc
  - clang

env:
  global:
    - PEAK_DRIVER_VER=8.5.1
    - CACHE_DIR=~/cached-deps
  matrix:
    - YARP_CHECKOUT=master
    - YARP_CHECKOUT=30dce54 # hotfix for v3.0.1
    - YARP_CHECKOUT=v2.3.72.1
    - YARP_CHECKOUT=v2.3.70.2

matrix:
  include:
    - if: type = cron
      compiler: gcc
      env: ROBOTOLOGY_CHECKOUT=devel
    - if: type = cron
      compiler: clang
      env: ROBOTOLOGY_CHECKOUT=devel

cache:
  directories: $CACHE_DIR

addons:
  apt:
    packages:
    # AMOR API
    - libboost-thread-dev
    - libeigen3-dev

    # device deps
    - libusb-1.0-0-dev # libphidget21
    - libspnav-dev # spacenavigator

    - libgtest-dev # unit testing
    - lcov # code coverage

before_install:
  #-- Configure Git (needed by YCM)
  - if [ ! `git config --get user.email` ]; then `git config --global user.email 'user@example.com'`; fi
  - if [ ! `git config --get user.name` ]; then `git config --global user.name 'Travis CI'`; fi

  #-- Register SSH deploy key for AMOR API private repository
  - source "$TRAVIS_BUILD_DIR/scripts/travis/configure-ssh.sh"

  #-- Code coverage
  - if [ "$CXX" = "g++" ]; then gem install coveralls-lcov; fi

install:
  #-- Install device-related deps
  - sudo apt-get install libxwiimote-dev

  #-- Install YCM
  - >
    source "$TRAVIS_BUILD_DIR/scripts/travis/git-cache-dependency.sh"
    --package-name YCM
    --repo-url https://github.com/robotology/ycm
    --repo-checkout "${ROBOTOLOGY_CHECKOUT:-${YCM_CHECKOUT:-master}}"

  #-- Install YARP
  - >
    source "$TRAVIS_BUILD_DIR/scripts/travis/git-cache-dependency.sh"
    --package-name YARP
    --repo-url https://github.com/robotology/yarp
    --repo-checkout "${ROBOTOLOGY_CHECKOUT:-$YARP_CHECKOUT}"
    --additional-cmake-options "-DSKIP_ACE:BOOL=ON"
    --prepend-to-linker-path lib
    --additional-export-paths "YARP_DATA_DIRS;share/yarp"

  #-- Install libphidget21
  - >
    if [ ! -d "$CACHE_DIR/libphidget_2.1.8" ]; then
        echo "libphidget_2.1.8 not in cache"
        tar xzf "$TRAVIS_BUILD_DIR/extern/phidget/libphidget_2.1.8.20151217.tar.gz" -C ~
        (cd ~/libphidget-2.1.8.20151217 && ./configure --enable-jni=no --prefix="$CACHE_DIR/libphidget_2.1.8")
        make -C ~/libphidget-2.1.8.20151217 -j$(nproc) install
    else
        echo "libphidget_2.1.8 already in cache"
    fi
  - export PKG_CONFIG_PATH="$CACHE_DIR/libphidget_2.1.8/lib/pkgconfig:$PKG_CONFIG_PATH"

  #-- Install Peak CAN driver
  - >
    if [ ! -d "$CACHE_DIR/peak-$PEAK_DRIVER_VER" ]; then
        echo "peak-$PEAK_DRIVER_VER not in cache"
        wget -O- -q https://www.peak-system.com/fileadmin/media/linux/files/peak-linux-driver-$PEAK_DRIVER_VER.tar.gz | tar -C ~ -xzf -
        make -C ~/"peak-linux-driver-$PEAK_DRIVER_VER/lib" -j$(nproc)
        mkdir -p "$CACHE_DIR/peak-$PEAK_DRIVER_VER/include" "$CACHE_DIR/peak-$PEAK_DRIVER_VER/lib"
        cp -f ~/"peak-linux-driver-$PEAK_DRIVER_VER/lib"/libpcan*.h "$CACHE_DIR/peak-$PEAK_DRIVER_VER/include"
        cp -d ~/"peak-linux-driver-$PEAK_DRIVER_VER/lib/lib"/* "$CACHE_DIR/peak-$PEAK_DRIVER_VER/lib"
        cp -f ~/"peak-linux-driver-$PEAK_DRIVER_VER/driver"/pcan*.h "$CACHE_DIR/peak-$PEAK_DRIVER_VER/include"
    else
        echo "peak-$PEAK_DRIVER_VER already in cache"
    fi
  - export PCan_ROOT="$CACHE_DIR/peak-$PEAK_DRIVER_VER"

  #-- Install color-debug
  - >
    source "$TRAVIS_BUILD_DIR/scripts/travis/git-cache-dependency.sh"
    --package-name COLOR_DEBUG
    --repo-url https://github.com/roboticslab-uc3m/color-debug
    --repo-checkout master

  #-- Install AMOR API (for AmorCartesianControl)
  - >
    source "$TRAVIS_BUILD_DIR/scripts/travis/git-cache-dependency.sh"
    --package-name AMOR_API
    --repo-url git@github.com:roboticslab-uc3m/amor-api
    --repo-checkout develop
    --additional-cmake-options "-DENABLE_udev_rules:BOOL=OFF"
    --prepend-to-linker-path lib

before_script:
  - mkdir -p "$TRAVIS_BUILD_DIR/build" && cd "$_"
  - cmake .. -DCMAKE_INSTALL_PREFIX="$PWD/install" -DENABLE_coverage:BOOL=ON
  - make install
  - export LD_LIBRARY_PATH=$PWD/install/lib:$LD_LIBRARY_PATH
  - export YARP_DATA_DIRS=$PWD/install/share/roboticslab-yarp-devices:$YARP_DATA_DIRS

script:
  - echo "No unit tests available"

after_success:
  #-- Code coverage
  - if [ "$CXX" = "g++" ]; then source "$TRAVIS_BUILD_DIR/scripts/travis/coverage.sh"; fi

  - make uninstall
